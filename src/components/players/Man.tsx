/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/Hoodie Character.glb -o src/components/Man.jsx -r public 
*/

import * as THREE from "three";
import { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useGraph } from "@react-three/fiber";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useRecoilValue } from "recoil";
import { MeAtom } from "../../store/PlayersAtom";

interface IMan {
  playerId: string;
  hairColor: string;
  shirtColor: string;
  pantsColor: string;
  position: [number, number, number];
}
export function Man({
  playerId,
  hairColor,
  shirtColor,
  pantsColor,
  position,
}: IMan) {
  const me = useRecoilValue(MeAtom);
  const positionVec3 = new THREE.Vector3(position[0], position[1], position[2]);
  const memoizedPosition = useMemo(
    () => new THREE.Vector3(position[0], position[1], position[2]),
    []
  );
  const group = useRef<THREE.Group>(null);

  const { scene, materials, animations } = useGLTF(
    "/models/Hoodie Character.glb"
  ) as GLTF & { materials: { [key: string]: THREE.MeshStandardMaterial } };

  const clone = useMemo(() => SkeletonUtils.clone(scene), []);
  const objectMap = useGraph(clone);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const nodes = objectMap.nodes as any;
  const [animation, setAnimation] = useState("CharacterArmature|Idle");
  const { actions } = useAnimations(animations, group);

  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.5).play();
    return () => {
      actions[animation]?.fadeOut(0.5);
    };
  }, [actions, animation]);

  useFrame(({ camera }, delta) => {
    if (!group.current) return;
    if (group.current.position.distanceTo(positionVec3) > 0.1) {
      const direction = group.current.position
        .clone()
        .sub(positionVec3)
        .normalize()
        .multiplyScalar(delta * 2.5);
      group.current.position.sub(direction);
      group.current.lookAt(positionVec3);
      console.log("hihi");
      setAnimation("CharacterArmature|Run");
    } else {
      setAnimation("CharacterArmature|Idle");
    }

    if (me?.id === playerId) {
      camera.position.set(
        group.current.position.x + 12,
        group.current.position.y + 12,
        group.current.position.z + 12
      );
      camera.lookAt(group.current.position);
    }
  });
  return (
    <>
      <group
        ref={group}
        position={memoizedPosition}
        dispose={null}
        name={playerId ?? ""}
      >
        <group name="Root_Scene">
          <group name="RootNode">
            <group
              name="CharacterArmature"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <primitive object={nodes.Root} />
            </group>
            <group
              name="Casual_Feet"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Feet_1"
                geometry={nodes.Casual_Feet_1.geometry}
                material={materials.White}
                skeleton={nodes.Casual_Feet_1.skeleton}
              >
                {/* <meshStandardMaterial color="red" /> */}
              </skinnedMesh>
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Feet_2"
                geometry={nodes.Casual_Feet_2.geometry}
                material={materials.Purple}
                skeleton={nodes.Casual_Feet_2.skeleton}
              >
                {/* <meshStandardMaterial color="red" /> */}
              </skinnedMesh>
            </group>
            <group
              name="Casual_Legs"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Legs_1"
                geometry={nodes.Casual_Legs_1.geometry}
                material={materials.Skin}
                skeleton={nodes.Casual_Legs_1.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Legs_2"
                geometry={nodes.Casual_Legs_2.geometry}
                material={materials.LightBlue}
                skeleton={nodes.Casual_Legs_2.skeleton}
              >
                <meshStandardMaterial color={pantsColor} />
              </skinnedMesh>
            </group>
            <group
              name="Casual_Head"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_1"
                geometry={nodes.Casual_Head_1.geometry}
                material={materials.Skin}
                skeleton={nodes.Casual_Head_1.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_2"
                geometry={nodes.Casual_Head_2.geometry}
                material={materials.Eyebrows}
                skeleton={nodes.Casual_Head_2.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_3"
                geometry={nodes.Casual_Head_3.geometry}
                material={materials.Eye}
                skeleton={nodes.Casual_Head_3.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_4"
                geometry={nodes.Casual_Head_4.geometry}
                material={materials.Hair}
                skeleton={nodes.Casual_Head_4.skeleton}
              >
                <meshStandardMaterial color={hairColor} />
              </skinnedMesh>
            </group>
            <group
              name="Casual_Body"
              position={[0, 0.007, 0]}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Body_1"
                geometry={nodes.Casual_Body_1.geometry}
                material={materials.Purple}
                skeleton={nodes.Casual_Body_1.skeleton}
              >
                <meshStandardMaterial color={shirtColor} />
              </skinnedMesh>
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Body_2"
                geometry={nodes.Casual_Body_2.geometry}
                material={materials.Skin}
                skeleton={nodes.Casual_Body_2.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/models/Hoodie Character.glb");
