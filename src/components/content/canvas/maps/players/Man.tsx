/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/Hoodie Character.glb -o src/components/Man.jsx -r public 
*/

import * as THREE from "three";
import { useEffect, useMemo, useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame, useGraph, useThree } from "@react-three/fiber";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useRecoilState, useRecoilValue } from "recoil";
import {
  CurrentMapAtom,
  CurrentMyRoomPlayerAtom,
  IPlayer,
  MeAtom,
  PlayerGroundStructuresFloorPlaneCornersSelector,
} from "../../../../../store/PlayersAtom";
import { calculateMinimapPosition } from "../../../../../utils";
import gsap from "gsap";

interface IMan {
  player?: IPlayer;
  hairColor: string;
  shirtColor: string;
  pantsColor: string;
  position: THREE.Vector3;
}
export function Man({
  player,
  hairColor,
  shirtColor,
  pantsColor,
  position,
}: IMan) {
  const playerId = player?.id;
  const currentMap = useRecoilValue(CurrentMapAtom);
  const [, setCurrentMyRoomPlayer] = useRecoilState(CurrentMyRoomPlayerAtom);
  const playerGroundStructuresFloorPlaneCorners = useRecoilValue(
    PlayerGroundStructuresFloorPlaneCornersSelector
  );

  const memoizedPosition = useMemo(
    () => position,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );
  const point = document.getElementById(`player-point-${playerId}`);
  const objectInteractionDiv = document.getElementById("object-interaction");

  const playerRef = useRef<THREE.Group>(null);
  const { scene: threeScene } = useThree();
  const nicknameBillboard = threeScene.getObjectByName(
    `nickname-billboard-${playerId}`
  );
  const chatBuubleBoard = threeScene.getObjectByName(
    `chat-bubble-billboard-${playerId}`
  );

  const me = useRecoilValue(MeAtom);

  const { scene, materials, animations } = useGLTF(
    "/models/Hoodie Character.glb"
  ) as GLTF & { materials: { [key: string]: THREE.MeshStandardMaterial } };

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const clone = useMemo(() => SkeletonUtils.clone(scene), []);
  const objectMap = useGraph(clone);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const nodes = objectMap.nodes as any;
  const [animation, setAnimation] = useState("CharacterArmature|Idle");
  const { actions } = useAnimations(animations, playerRef);

  useEffect(() => {
    if (!playerRef.current) return;
    if (me?.id === playerId && currentMap === "GROUND") {
      gsap.fromTo(
        playerRef.current.scale,
        {
          duration: 2,
          x: 0,
          y: 0,
          z: 0,
        },
        {
          x: 1,
          y: 1,
          z: 1,
        }
      );
    }
  }, [currentMap, me?.id, playerId]);

  useEffect(() => {
    actions[animation]?.reset().fadeIn(0.5).play();
    return () => {
      actions[animation]?.fadeOut(0.5);
    };
  }, [actions, animation]);

  // const clock = new THREE.Clock();

  // const tempVec3 = new THREE.Vector3();

  useFrame(({ camera }) => {
    if (!playerRef.current) return;
    if (playerRef.current.position.distanceTo(position) > 0.1) {
      const direction = playerRef.current.position
        .clone()
        .sub(position)
        .normalize()
        .multiplyScalar(0.04);
      playerRef.current.position.sub(direction);
      playerRef.current.lookAt(position);

      if (point) {
        point.style.transform = `translate(
          ${calculateMinimapPosition(playerRef.current.position).x}px,
          ${calculateMinimapPosition(playerRef.current.position).y}px
          )`;
      }

      setAnimation("CharacterArmature|Run");
    } else {
      setAnimation("CharacterArmature|Idle");
    }
    if (nicknameBillboard) {
      nicknameBillboard.position.set(
        playerRef.current.position.x,
        playerRef.current.position.y + 2,
        playerRef.current.position.z
      );
      nicknameBillboard.lookAt(10000, 10000, 10000);
    }
    if (chatBuubleBoard) {
      chatBuubleBoard.position.set(
        playerRef.current.position.x,
        playerRef.current.position.y + 2.5,
        playerRef.current.position.z
      );
      chatBuubleBoard.lookAt(10000, 10000, 10000);
    }

    if (
      me?.id !== undefined &&
      player?.id !== undefined &&
      me?.id === playerId
    ) {
      camera.position.set(
        playerRef.current.position.x + 12,
        playerRef.current.position.y + 12,
        playerRef.current.position.z + 12
      );
      camera.lookAt(playerRef.current.position);

      const currentCloseStructure =
        playerGroundStructuresFloorPlaneCorners.find((structure) => {
          return (
            playerRef.current!.position.x < structure.corners[0].x &&
            playerRef.current!.position.x > structure.corners[2].x &&
            playerRef.current!.position.z < structure.corners[0].z &&
            playerRef.current!.position.z > structure.corners[2].z
          );
        });
      if (currentCloseStructure) {
        if (objectInteractionDiv) {
          objectInteractionDiv.innerText = currentCloseStructure.name;
          objectInteractionDiv.style.display = "block";
          camera.lookAt(currentCloseStructure.position);
          camera.position.set(
            playerRef.current.position.x + 6,
            playerRef.current.position.y + 6,
            playerRef.current.position.z + 6
          );
        }
      } else {
        if (objectInteractionDiv) {
          objectInteractionDiv.innerText = "";
          objectInteractionDiv.style.display = "none";
        }
      }
    }
  });
  return (
    <>
      <group
        ref={playerRef}
        position={memoizedPosition}
        dispose={null}
        name={playerId ?? ""}
        onClick={(e) => {
          console.log("here?");
          e.stopPropagation();
          if (me?.id !== playerId) {
            setCurrentMyRoomPlayer(player);
          }
        }}
      >
        <group name="Root_Scene">
          <group name="RootNode">
            <group
              name="CharacterArmature"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <primitive object={nodes.Root} />
            </group>
            <group
              name="Casual_Feet"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Feet_1"
                geometry={nodes.Casual_Feet_1.geometry}
                material={materials.White}
                skeleton={nodes.Casual_Feet_1.skeleton}
              >
                {/* <meshStandardMaterial color="red" /> */}
              </skinnedMesh>
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Feet_2"
                geometry={nodes.Casual_Feet_2.geometry}
                material={materials.Purple}
                skeleton={nodes.Casual_Feet_2.skeleton}
              >
                {/* <meshStandardMaterial color="red" /> */}
              </skinnedMesh>
            </group>
            <group
              name="Casual_Legs"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Legs_1"
                geometry={nodes.Casual_Legs_1.geometry}
                material={materials.Skin}
                skeleton={nodes.Casual_Legs_1.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Legs_2"
                geometry={nodes.Casual_Legs_2.geometry}
                material={materials.LightBlue}
                skeleton={nodes.Casual_Legs_2.skeleton}
              >
                <meshStandardMaterial color={pantsColor} />
              </skinnedMesh>
            </group>
            <group
              name="Casual_Head"
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_1"
                geometry={nodes.Casual_Head_1.geometry}
                material={materials.Skin}
                skeleton={nodes.Casual_Head_1.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_2"
                geometry={nodes.Casual_Head_2.geometry}
                material={materials.Eyebrows}
                skeleton={nodes.Casual_Head_2.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_3"
                geometry={nodes.Casual_Head_3.geometry}
                material={materials.Eye}
                skeleton={nodes.Casual_Head_3.skeleton}
              />
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Head_4"
                geometry={nodes.Casual_Head_4.geometry}
                material={materials.Hair}
                skeleton={nodes.Casual_Head_4.skeleton}
              >
                <meshStandardMaterial color={hairColor} />
              </skinnedMesh>
            </group>
            <group
              name="Casual_Body"
              position={[0, 0.007, 0]}
              rotation={[-Math.PI / 2, 0, 0]}
              scale={100}
            >
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Body_1"
                geometry={nodes.Casual_Body_1.geometry}
                material={materials.Purple}
                skeleton={nodes.Casual_Body_1.skeleton}
              >
                <meshStandardMaterial color={shirtColor} />
              </skinnedMesh>
              <skinnedMesh
                castShadow
                receiveShadow
                name="Casual_Body_2"
                geometry={nodes.Casual_Body_2.geometry}
                material={materials.Skin}
                skeleton={nodes.Casual_Body_2.skeleton}
              />
            </group>
          </group>
        </group>
      </group>
    </>
  );
}

useGLTF.preload("/models/Hoodie Character.glb");
