/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/models/Hoodie Character.glb -o src/components/Man.jsx -r public 
*/

import * as THREE from "three";
import { useMemo, useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { ThreeEvent, useGraph } from "@react-three/fiber";
import { GLTF, SkeletonUtils } from "three-stdlib";
import { useRecoilState, useRecoilValue } from "recoil";
import {
  CurrentMyRoomPlayerAtom,
  IPlayer,
  MeAtom,
} from "../../../../../store/PlayersAtom";
import { usePlayer } from "./hooks/usePlayer";

interface IPlayerProps {
  player?: IPlayer;
  position: THREE.Vector3;
  currentGlbName: string;
}
export function Player({ player, position, currentGlbName }: IPlayerProps) {
  const playerId = player?.id;
  const [, setCurrentMyRoomPlayer] = useRecoilState(CurrentMyRoomPlayerAtom);

  const memoizedPosition = useMemo(
    () => position,
    // eslint-disable-next-line react-hooks/exhaustive-deps
    []
  );

  const playerRef = useRef<THREE.Group>(null);

  const me = useRecoilValue(MeAtom);

  const {
    scene: manScene,
    materials: manMaterials,
    animations: manAnim,
  } = useGLTF(`/models/CubeGuyCharacter.glb`) as GLTF & {
    materials: { [key: string]: THREE.MeshStandardMaterial };
  };
  const {
    scene: womanScene,
    materials: womanMaterials,
    animations: womanAnim,
  } = useGLTF(`/models/CubeWomanCharacter.glb`) as GLTF & {
    materials: { [key: string]: THREE.MeshStandardMaterial };
  };
  const {
    scene: steveScene,
    materials: steveMaterials,
    animations: steveAnim,
  } = useGLTF(`/models/Steve.glb`) as GLTF & {
    materials: { [key: string]: THREE.MeshStandardMaterial };
  };

  const {
    scene,
    materials,
    animations,
  }: {
    scene: THREE.Group;
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    materials: any;
    animations: THREE.AnimationClip[];
  } = useMemo(() => {
    switch (currentGlbName) {
      case "CubeGuyCharacter":
        return {
          scene: manScene,
          materials: manMaterials,
          animations: manAnim,
        };
      case "CubeWomanCharacter":
        return {
          scene: womanScene,
          materials: womanMaterials,
          animations: womanAnim,
        };
      case "Steve":
        return {
          scene: steveScene,
          materials: steveMaterials,
          animations: steveAnim,
        };
      default:
        return {
          scene: manScene,
          materials: manMaterials,
          animations: manAnim,
        };
    }
  }, [
    currentGlbName,
    manAnim,
    manMaterials,
    manScene,
    steveAnim,
    steveMaterials,
    steveScene,
    womanAnim,
    womanMaterials,
    womanScene,
  ]);

  // eslint-disable-next-line react-hooks/exhaustive-deps
  const clone = useMemo(() => SkeletonUtils.clone(scene), []);
  const objectMap = useGraph(clone);
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const nodes = objectMap.nodes as any;
  usePlayer({ player, position, scene, playerRef, animations });
  return (
    // <primitive
    //   object={scene}
    //   ref={playerRef}
    //   position={memoizedPosition}
    //   dispose={null}
    //   name={playerId ?? ""}
    //   onClick={(e: ThreeEvent<MouseEvent>) => {
    //     console.log("here?");
    //     e.stopPropagation();
    //     if (me?.id !== playerId) {
    //       setCurrentMyRoomPlayer(player);
    //     }
    //   }}
    // />
    <group
      ref={playerRef}
      position={memoizedPosition}
      name={playerId ?? ""}
      onClick={(e: ThreeEvent<MouseEvent>) => {
        console.log("here?");
        e.stopPropagation();
        if (me?.id !== playerId) {
          setCurrentMyRoomPlayer(player);
        }
      }}
      dispose={null}
    >
      <group name="Root_Scene">
        <group name="RootNode">
          <group
            name="CharacterArmature"
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          >
            <primitive object={nodes.Root} />
          </group>
          <skinnedMesh 
            name="Character"
            geometry={nodes.Character.geometry}
            material={
              currentGlbName === "CubeWomanCharacter"
                ? ["Atlas.001"]
                : materials.Atlas
            }
            skeleton={nodes.Character.skeleton}
            rotation={[-Math.PI / 2, 0, 0]}
            scale={100}
          />
        </group>
      </group>
    </group>
  );
}
